# Additional API Gateway configurations to be merged with main template
Resources:
  SlackApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Name: !Sub ${AWS::StackName}-api
      Description: API Gateway for Slack2Backlog integration
      TracingEnabled: true
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true
          ThrottlingRateLimit: 100
          ThrottlingBurstLimit: 200
      AccessLogSetting:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '$context.requestId $context.requestTime $context.httpMethod $context.path $context.status $context.responseLength $context.error.message $context.error.messageString'
      Cors:
        AllowMethods: "'POST, OPTIONS'"
        AllowHeaders: "'Content-Type,X-Slack-Signature,X-Slack-Request-Timestamp'"
        AllowOrigin: "'*'"
        MaxAge: 86400
      Auth:
        ApiKeyRequired: false
      EndpointConfiguration:
        Type: REGIONAL
      Tags:
        Environment: !Ref Stage
        Application: slack2backlog

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/api-gateway/${AWS::StackName}-${Stage}
      RetentionInDays: 7

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  # Request Validator
  RequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: RequestBodyValidator
      RestApiId: !Ref SlackApi
      ValidateRequestBody: true
      ValidateRequestParameters: true

  # Usage Plan for rate limiting
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: SlackApiStage
    Properties:
      UsagePlanName: !Sub ${AWS::StackName}-usage-plan
      Description: Usage plan for Slack2Backlog API
      ApiStages:
        - ApiId: !Ref SlackApi
          Stage: !Ref Stage
      Throttle:
        RateLimit: 100
        BurstLimit: 200
      Quota:
        Limit: 1000000
        Period: MONTH

  # CloudWatch Dashboard
  ApiDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${AWS::StackName}-api-dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "Count", {"stat": "Sum"}],
                  [".", "4XXError", {"stat": "Sum"}],
                  [".", "5XXError", {"stat": "Sum"}]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "API Gateway Requests"
              }
            },
            {
              "type": "metric",
              "properties": {
                "metrics": [
                  ["AWS/ApiGateway", "Latency", {"stat": "Average"}],
                  [".", ".", {"stat": "p99"}]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "API Gateway Latency"
              }
            }
          ]
        }
