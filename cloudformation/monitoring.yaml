AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Monitoring and alerting stack for slack2backlog

Parameters:
  ServiceName:
    Type: String
    Default: slack2backlog
    Description: Name of the service
  
  AlarmEmail:
    Type: String
    Description: Email address for alarm notifications
    Default: nakao@bridge.vc

Resources:
  # SNS Topic for Alarms
  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${ServiceName}-alarms
      DisplayName: Slack2Backlog Alarms
      Subscription:
        - Endpoint: !Ref AlarmEmail
          Protocol: email

  # CloudWatch Dashboard
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${ServiceName}-dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", { "stat": "Sum" } ],
                  [ ".", "Errors", { "stat": "Sum" } ],
                  [ ".", "Duration", { "stat": "Average" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Function Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Count", { "stat": "Sum" } ],
                  [ ".", "4XXError", { "stat": "Sum" } ],
                  [ ".", "5XXError", { "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "NumberOfMessagesSent", { "stat": "Sum" } ],
                  [ ".", "NumberOfMessagesReceived", { "stat": "Sum" } ],
                  [ ".", "ApproximateNumberOfMessagesVisible", { "stat": "Average" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "SQS Queue Metrics",
                "period": 300
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/lambda/${ServiceName}-event-ingest'\n| fields @timestamp, message\n| filter level = \"error\"\n| sort @timestamp desc\n| limit 20",
                "region": "${AWS::Region}",
                "title": "Recent Errors",
                "queryType": "Logs"
              }
            }
          ]
        }

  # Lambda Error Alarm
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ServiceName}-lambda-errors
      AlarmDescription: Lambda function error rate is too high
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmTopic

  # Lambda Duration Alarm
  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ServiceName}-lambda-duration
      AlarmDescription: Lambda function duration is too high
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 3000
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmTopic

  # API Gateway 5XX Alarm
  ApiGateway5XXAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ServiceName}-api-5xx
      AlarmDescription: API Gateway 5XX error rate is too high
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmTopic

  # SQS Message Age Alarm
  SQSMessageAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ServiceName}-sqs-message-age
      AlarmDescription: SQS messages are too old
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 600
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmTopic

  # Custom Metric Filter for Error Rate
  ErrorLogMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '[timestamp, request_id, level = "error", ...]'
      LogGroupName: !Sub /aws/lambda/${ServiceName}-event-ingest
      MetricTransformations:
        - MetricName: CustomErrors
          MetricNamespace: !Sub ${ServiceName}/Errors
          MetricValue: "1"
          DefaultValue: 0

  # CloudWatch Insights Queries
  ErrorAnalysisQuery:
    Type: AWS::CloudWatch::InsightRule
    Properties:
      RuleName: !Sub ${ServiceName}-error-analysis
      RuleState: ENABLED
      RuleBody: !Sub |
        fields @timestamp, level, message, error.code, error.message
        | filter level = "error"
        | stats count() by error.code
        | sort count desc

  # DLQ Alarm
  DLQMessageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ServiceName}-dlq-messages
      AlarmDescription: Messages in Dead Letter Queue
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmTopic
      Dimensions:
        - Name: QueueName
          Value: !Sub ${ServiceName}-dlq

  # Lambda Throttle Alarm
  LambdaThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ServiceName}-lambda-throttles
      AlarmDescription: Lambda function is being throttled
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmTopic

  # Lambda Concurrent Executions Alarm
  LambdaConcurrentExecutionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ServiceName}-lambda-concurrent-executions
      AlarmDescription: High concurrent executions
      MetricName: ConcurrentExecutions
      Namespace: AWS/Lambda
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 2
      Threshold: 900
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmTopic

  # DynamoDB Throttle Alarm
  DynamoDBThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ServiceName}-dynamodb-throttles
      AlarmDescription: DynamoDB table is being throttled
      MetricName: UserErrors
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmTopic
      Dimensions:
        - Name: TableName
          Value: !Sub ${ServiceName}-idempotency

  # API Gateway 4XX Alarm
  ApiGateway4XXAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${ServiceName}-api-4xx
      AlarmDescription: High rate of 4XX errors
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 20
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlarmTopic

  # Custom Business Metrics
  BacklogIssueCreatedMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '[timestamp, request_id, level, message_text = "Backlog issue created successfully", ...]'
      LogGroupName: !Sub /aws/lambda/${ServiceName}-backlog-worker
      MetricTransformations:
        - MetricName: BacklogIssuesCreated
          MetricNamespace: !Sub ${ServiceName}/Business
          MetricValue: "1"
          DefaultValue: 0

  # Slack API Error Metric Filter
  SlackAPIErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '[timestamp, request_id, level = "error", message_text = "*Slack API*", ...]'
      LogGroupName: !Sub /aws/lambda/${ServiceName}-backlog-worker
      MetricTransformations:
        - MetricName: SlackAPIErrors
          MetricNamespace: !Sub ${ServiceName}/External
          MetricValue: "1"
          DefaultValue: 0

  # Backlog API Error Metric Filter
  BacklogAPIErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: '[timestamp, request_id, level = "error", message_text = "*Backlog API*", ...]'
      LogGroupName: !Sub /aws/lambda/${ServiceName}-backlog-worker
      MetricTransformations:
        - MetricName: BacklogAPIErrors
          MetricNamespace: !Sub ${ServiceName}/External
          MetricValue: "1"
          DefaultValue: 0

Outputs:
  DashboardURL:
    Description: URL to CloudWatch Dashboard
    Value: !Sub https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ServiceName}-dashboard

  AlarmTopicArn:
    Description: SNS Topic ARN for alarms
    Value: !Ref AlarmTopic
    Export:
      Name: !Sub ${ServiceName}-alarm-topic