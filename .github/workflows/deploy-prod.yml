name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "deploy" to confirm production deployment'
        required: true
        default: ''

env:
  AWS_REGION: ap-northeast-1
  ENVIRONMENT: production
  STACK_NAME: slack2backlog-prod

jobs:
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.check.outputs.proceed }}
    
    steps:
    - name: Check confirmation
      id: check
      run: |
        if [[ "${{ github.event_name }}" == "release" ]] || [[ "${{ github.event.inputs.confirm }}" == "deploy" ]]; then
          echo "proceed=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Deployment cancelled. Type 'deploy' to confirm."
          echo "proceed=false" >> $GITHUB_OUTPUT
          exit 1
        fi

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.proceed == 'true'
    environment: production
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_PROD_DEPLOY_ROLE_ARN }}
        role-session-name: GitHubActions-ProdDeploy
        aws-region: ${{ env.AWS_REGION }}

    - name: Install dependencies
      run: |
        npm ci
        cd src/event_ingest && npm ci
        cd ../backlog_worker && npm ci

    - name: Run all tests
      run: |
        npm test
        npm run test:coverage

    - name: Check test coverage
      run: |
        COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
        echo "Test coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "‚ùå Test coverage is below 80%"
          exit 1
        fi

    - name: Build SAM application
      run: sam build --use-container

    - name: Validate SAM template
      run: sam validate --lint

    - name: Create change set
      id: changeset
      run: |
        CHANGE_SET_NAME="deploy-$(date +%Y%m%d%H%M%S)"
        sam deploy \
          --stack-name ${{ env.STACK_NAME }} \
          --s3-bucket ${{ secrets.SAM_ARTIFACTS_BUCKET }} \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }} \
          --no-execute-changeset \
          --no-fail-on-empty-changeset \
          --change-set-name $CHANGE_SET_NAME \
          --parameter-overrides \
            Environment=${{ env.ENVIRONMENT }} \
            SlackSigningSecret=${{ secrets.PROD_SLACK_SIGNING_SECRET }} \
            SlackBotToken=${{ secrets.PROD_SLACK_BOT_TOKEN }} \
            BacklogApiKey=${{ secrets.PROD_BACKLOG_API_KEY }} \
            BacklogSpace=${{ secrets.PROD_BACKLOG_SPACE }} \
            BacklogProjectId=${{ secrets.PROD_BACKLOG_PROJECT_ID }} \
            BacklogIssueTypeId=${{ secrets.PROD_BACKLOG_ISSUE_TYPE_ID }}
        
        echo "change_set_name=$CHANGE_SET_NAME" >> $GITHUB_OUTPUT

    - name: Review change set
      run: |
        aws cloudformation describe-change-set \
          --stack-name ${{ env.STACK_NAME }} \
          --change-set-name ${{ steps.changeset.outputs.change_set_name }} \
          --region ${{ env.AWS_REGION }}

    - name: Execute change set
      run: |
        aws cloudformation execute-change-set \
          --stack-name ${{ env.STACK_NAME }} \
          --change-set-name ${{ steps.changeset.outputs.change_set_name }} \
          --region ${{ env.AWS_REGION }}
        
        # Wait for stack update to complete
        aws cloudformation wait stack-update-complete \
          --stack-name ${{ env.STACK_NAME }} \
          --region ${{ env.AWS_REGION }}

    - name: Get stack outputs
      id: stack
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
          --output text)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT

    - name: Run smoke tests
      run: |
        echo "Running production smoke tests..."
        # Add production-safe smoke tests here

    - name: Create deployment tag
      run: |
        TAG_NAME="deployed-prod-$(date +%Y%m%d%H%M%S)"
        git tag $TAG_NAME
        git push origin $TAG_NAME

    - name: Generate deployment report
      run: |
        echo "# Production Deployment Report" > deployment-report.md
        echo "## Stack Information" >> deployment-report.md
        echo "- Stack Name: ${{ env.STACK_NAME }}" >> deployment-report.md
        echo "- API URL: ${{ steps.stack.outputs.api_url }}" >> deployment-report.md
        echo "- Region: ${{ env.AWS_REGION }}" >> deployment-report.md
        echo "- Environment: ${{ env.ENVIRONMENT }}" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "## Deployment Details" >> deployment-report.md
        echo "- Date: $(date)" >> deployment-report.md
        echo "- Commit: ${{ github.sha }}" >> deployment-report.md
        echo "- Release: ${{ github.event.release.tag_name || 'Manual' }}" >> deployment-report.md
        echo "- Deployed by: ${{ github.actor }}" >> deployment-report.md

    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: production-deployment-report
        path: deployment-report.md
        retention-days: 90

    - name: Notify deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          üöÄ Production deployment ${{ job.status }}
          Stack: ${{ env.STACK_NAME }}
          API URL: ${{ steps.stack.outputs.api_url }}
          Deployed by: ${{ github.actor }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    environment: production
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_PROD_DEPLOY_ROLE_ARN }}
        role-session-name: GitHubActions-Rollback
        aws-region: ${{ env.AWS_REGION }}

    - name: Rollback stack
      run: |
        echo "‚ö†Ô∏è Attempting to rollback production deployment..."
        aws cloudformation cancel-update-stack \
          --stack-name ${{ env.STACK_NAME }} \
          --region ${{ env.AWS_REGION }} || true

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ‚ö†Ô∏è Production deployment failed and rolled back
          Stack: ${{ env.STACK_NAME }}
          Check GitHub Actions for details
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}